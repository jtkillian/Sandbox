name: MATLAB CI + Minimal AI Review (GitHub Models)

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  issues: write
  models: read

env:
  # Policy / gating
  ALLOWED_BASES: "bot/main,bots/main,dev,main"
  REQUIRED_HEAD_PREFIXES: "bot/copilot-,bot/codex-,bots/copilot-,bots/codex-"
  HUMAN_OWNER: "jtkillian"
  MAX_REVISIONS: "5"
  MIN_COVERAGE: "60"

  # AI controls (quota-safe)
  MODEL_ID: "openai/o4-mini"   # selected model
  CI_AI_ENABLED: "1"           # 1=allow AI, 0=never call models
  CI_AI_ON_SUCCESS: "0"        # 1=AI summary even on passing PRs (uses more quota)

jobs:
  test-and-review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (shallow is fine)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Label PR as in-progress
        uses: actions-ecosystem/action-add-labels@v1
        with: { labels: "ci:in-progress" }

      - name: Enforce agent branch policy (bots only)
        id: policy
        shell: bash
        run: |
          if [ "${{ github.actor }}" = "${HUMAN_OWNER}" ]; then exit 0; fi
          if [[ "${{ github.head_ref }}" != bot/* && "${{ github.head_ref }}" != bots/* ]]; then
            echo "::error::Head must start with bot/ or bots/."; echo "policy_fail=true" >> $GITHUB_OUTPUT; exit 1; fi
          allowed="${ALLOWED_BASES//,/|}"
          if ! [[ "${{ github.base_ref }}" =~ ^(${allowed})$ ]]; then
            echo "::error::Base must be one of: ${ALLOWED_BASES}"; echo "policy_fail=true" >> $GITHUB_OUTPUT; exit 1; fi
          ok=0; IFS=',' read -ra PFX <<< "$REQUIRED_HEAD_PREFIXES"
          for p in "${PFX[@]}"; do [[ "${{ github.head_ref }}" == $p* ]] && ok=1; done
          if [[ $ok -eq 0 ]]; then
            echo "::error::Head must start with one of: ${REQUIRED_HEAD_PREFIXES}"; echo "policy_fail=true" >> $GITHUB_OUTPUT; exit 1; fi
        continue-on-error: true

      - name: Label wrong-branch policy
        if: steps.policy.outputs.policy_fail == 'true'
        uses: actions-ecosystem/action-add-labels@v1
        with: { labels: "policy:wrong-branch" }

      # ----- NEW: make shallow diff robust on PRs -----
      - name: Determine PR SHAs & fetch just those commits
        id: shas
        shell: bash
        run: |
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"
          echo "base=$BASE" >> $GITHUB_OUTPUT
          echo "head=$HEAD" >> $GITHUB_OUTPUT
          # Fetch the two objects so diff works even with shallow checkout
          git fetch --no-tags --depth=1 origin $BASE $HEAD

      - uses: matlab-actions/setup-matlab@v2

      - name: Run MATLAB CI (analyze + tests)
        run: matlab -batch "try, run_ci, exit(0); catch ME, disp(getReport(ME,'extended')); exit(1); end"

      - name: Summarize tests & coverage (outputs)
        id: analyze
        run: |
          python3 - <<'PY' > _out.json
          import xml.etree.ElementTree as ET, os, json
          out = {"tests":0,"failures":0,"errors":0,"coverage":0.0,"failed_list":""}
          junit='test-results/results.xml'; cov='code-coverage/coverage.xml'
          if os.path.exists(junit):
            root=ET.parse(junit).getroot()
            for ts in root.iter('testsuite'):
              out["tests"]+=int(ts.get('tests',0)); out["failures"]+=int(ts.get('failures',0)); out["errors"]+=int(ts.get('errors',0))
              for tc in ts.iter('testcase'):
                f=tc.find('failure'); e=tc.find('error')
                if f is not None or e is not None:
                  name=f"{ts.get('name','suite')}.{tc.get('name','case')}"
                  msg=(f or e).get('message','').replace('\n',' ')[:200]
                  out["failed_list"] += f"{name}: {msg}\n"
          if os.path.exists(cov):
            root=ET.parse(cov).getroot()
            lv=int(root.attrib.get('lines-valid','0')); lc=int(root.attrib.get('lines-covered','0'))
            out["coverage"]= round(100.0*lc/(lv or 1),1)
          print(json.dumps(out))
          PY
          echo "tests=$(jq -r .tests _out.json)" >> $GITHUB_OUTPUT
          echo "failures=$(jq -r .failures _out.json)" >> $GITHUB_OUTPUT
          echo "errors=$(jq -r .errors _out.json)" >> $GITHUB_OUTPUT
          echo "coverage=$(jq -r .coverage _out.json)" >> $GITHUB_OUTPUT
          echo "failed_list<<EOF" >> $GITHUB_OUTPUT
          jq -r .failed_list _out.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build CI-NOTES.md (non-AI)
        id: notes
        shell: bash
        run: |
          mkdir -p ci
          FILE=ci/CI-NOTES.md
          T=${{ steps.analyze.outputs.tests }}
          F=${{ steps.analyze.outputs.failures }}
          E=${{ steps.analyze.outputs.errors }}
          COV=${{ steps.analyze.outputs.coverage }}
          BASE=${{ steps.shas.outputs.base }}
          HEAD=${{ steps.shas.outputs.head }}
          {
            echo "# CI Notes (latest)"
            echo "- **PR:** #${{ github.event.number }}"
            echo "- **Base → Head:** \`${{ github.base_ref }}\` → \`${{ github.head_ref }}\`"
            echo "- **Status:** $([ '${{ job.status }}' = success ] && echo 'All MATLAB checks passed.' || echo 'Checks failed; see details.')"
            echo "- **Ping:** @jtkillian"
            echo
            echo "## Metrics"
            echo "- Tests: ${T} | Failures: ${F} | Errors: ${E}"
            echo "- Coverage: ${COV}% (target ${MIN_COVERAGE}%)"
            echo
            echo "## Impact (files changed)"
            echo '```diff'
            git --no-pager diff --name-status "$BASE...$HEAD" | sed -e 's/^/  /'
            echo '```'
          } > "$FILE"
          echo "path=$FILE" >> $GITHUB_OUTPUT

      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: ci-notes
          path: ${{ steps.notes.outputs.path }}

      # One-time INITIAL AI summary on PR "opened" only; skip if label exists or AI disabled
      - name: One-time Initial AI Review (on open)
        if: ${{ env.CI_AI_ENABLED == '1' && github.event.action == 'opened' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MODEL_ID: ${{ env.MODEL_ID }}
        shell: bash
        run: |
          set -e
          if gh api repos/${{ github.repository }}/issues/${{ github.event.number }} --jq '.labels[].name' | grep -qx 'ci:ai-initialized'; then
            echo "Initial AI review already posted; skipping."
            exit 0
          fi

          TITLE="${{ github.event.pull_request.title }}"
          BODY=$(jq -r '.pull_request.body // ""' <<< '${{ toJson(github.event) }}')
          BASE=${{ steps.shas.outputs.base }}
          HEAD=${{ steps.shas.outputs.head }}
          DIFF=$(git --no-pager diff --unified=0 --no-color "$BASE...$HEAD" | head -c 15000)

          read -r -d '' PAYLOAD <<JSON
          {
            "model": "${MODEL_ID}",
            "messages": [
              {"role":"system","content":"You are a concise MATLAB PR reviewer."},
              {"role":"user","content":"Write a short PR summary (what/why/risks). Keep it under ~200 words.\n\nTitle: ${TITLE}\nBody: ${BODY}\nDiff (truncated):\n${DIFF}"}
            ],
            "temperature": 0.2
          }
          JSON

          HTTP=$(curl -sS -w "%{http_code}" -o _ai.json -X POST https://models.github.ai/inference/chat/completions \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/json" -d "$PAYLOAD" || echo "000")

          mkdir -p ci
          FILE=ci/CI-NOTES-INITIAL.md
          if [ "$HTTP" = "200" ]; then
            SUMMARY=$(jq -r '.choices[0].message.content // ""' _ai.json | head -c 4000)
            {
              echo "# Initial AI Review"
              echo "$SUMMARY"
            } > "$FILE"
          else
            {
              echo "# Initial AI Review"
              echo "_AI quota unavailable; skipping initial summary._"
            } > "$FILE"
          fi

          gh api repos/${{ github.repository }}/issues/${{ github.event.number }} -X POST \
            -f labels='["ci:ai-initialized"]' >/dev/null

          gh pr comment ${{ github.event.number }} --body "$(printf '### (One-time) Initial AI Review\n\n%s' "$(cat "$FILE")")"

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: matlab-ci-artifacts
          path: |
            ci/CI-NOTES.md
            ci/CI-NOTES-INITIAL.md
            test-results/results.xml
            code-coverage/coverage.xml
          if-no-files-found: warn

      # Gate + notify (AI try -> fallback). Uses the shallow-safe SHAs for diffs.
      - name: Gate + notify (AI try -> fallback)
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MODEL_ID: ${{ env.MODEL_ID }}
          MIN_COVERAGE: ${{ env.MIN_COVERAGE }}
          T: ${{ steps.analyze.outputs.tests }}
          F: ${{ steps.analyze.outputs.failures }}
          E: ${{ steps.analyze.outputs.errors }}
          COV: ${{ steps.analyze.outputs.coverage }}
          FAILTXT: ${{ steps.analyze.outputs.failed_list }}
          CI_AI_ENABLED: ${{ env.CI_AI_ENABLED }}
        shell: bash
        run: |
          NEEDS=0
          if [ "$F" -gt 0 ] || [ "$E" -gt 0 ]; then NEEDS=1; fi
          if [ "$(printf '%.0f' "$COV")" -lt "${MIN_COVERAGE}" ]; then NEEDS=1; fi

          if [ $NEEDS -eq 0 ]; then
            gh issue edit ${{ github.event.number }} --add-label "ci:passed"
            gh pr comment ${{ github.event.number }} --body "✅ CI passed. @jtkillian you can \`/approve\` to auto-merge."
            exit 0
          fi

          gh issue edit ${{ github.event.number }} --add-label "ci:needs-work"

          CUR=$(gh api repos/${{ github.repository }}/issues/${{ github.event.number }} --jq '.labels[].name' | grep -E '^ci:rev-' | head -n1 || true)
          REV=${CUR#ci:rev-}; [ -z "$REV" ] && REV=0; NEXT=$((REV+1))
          [ -n "$CUR" ] && gh issue edit ${{ github.event.number }} --remove-label "$CUR"
          if [ $NEXT -gt ${{ env.MAX_REVISIONS }} ]; then
            gh issue edit ${{ github.event.number }} --add-label "ci:error-loop"
            gh pr comment ${{ github.event.number }} --body "⚠️ Auto-refinement cap (${{ env.MAX_REVISIONS }}) reached. @jtkillian please review."
            exit 1
          fi
          gh issue edit ${{ github.event.number }} --add-label "ci:rev-${NEXT}"

          if [ "${CI_AI_ENABLED}" = "1" ]; then
            TITLE="${{ github.event.pull_request.title }}"
            BODY=$(jq -r '.pull_request.body // ""' <<< '${{ toJson(github.event) }}')
            BASE=${{ steps.shas.outputs.base }}
            HEAD=${{ steps.shas.outputs.head }}
            DIFF=$(git --no-pager diff --unified=0 --no-color "$BASE...$HEAD" | head -c 16000)
            read -r -d '' PAYLOAD <<JSON
            {
              "model": "${MODEL_ID}",
              "messages": [
                {"role":"system","content":"You are a senior MATLAB maintainer generating small, targeted fix plans."},
                {"role":"user","content":"Given the failing tests and coverage gap, produce a short, actionable plan for Copilot: tests to add/repair and minimal code changes. Use bullets only.\nCoverage target: ${MIN_COVERAGE}%\nMetrics: tests=${T}, failures=${F}, errors=${E}, coverage=${COV}%\nFailing (trunc):\n${FAILTXT}\nTitle: ${TITLE}\nBody: ${BODY}\nDiff (trunc):\n${DIFF}"}
              ],
              "temperature": 0.2
            }
            JSON
            HTTP=$(curl -sS -w "%{http_code}" -o _fix.json -X POST https://models.github.ai/inference/chat/completions \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -H "Content-Type: application/json" -d "$PAYLOAD" || echo "000")
            if [ "$HTTP" = "200" ]; then
              PLAN=$(jq -r '.choices[0].message.content // ""' _fix.json | head -c 4000)
              printf "%s\n" "@copilot Please update this PR.\n\nAI fix plan (suggested):\n${PLAN}\n\nGuidance:\n- Keep changes minimal & scoped.\n- Put tests in \`tests/\` using \`matlab.unittest\`.\n- Avoid interactive graphics; use \`rng default\`.\n- Re-run \`matlab -batch run_ci\`." > _msg.md
              gh pr comment ${{ github.event.number }} --body "$(cat _msg.md)"
              exit 1
            fi
          fi

          # Deterministic fallback (no models)
          cat > _msg.md <<'MSG'
@copilot Please update this PR.

Goals:
1) Fix failing MATLAB tests/errors while preserving passing behavior.
2) If coverage is below target, add focused `matlab.unittest` tests under `tests/` to reach the threshold.
3) Re-run `matlab -batch run_ci` in your VM; push commits until green.

Guidance:
- Keep changes minimal & scoped.
- Place tests in `tests/`; avoid interactive graphics; use deterministic RNG (`rng default`).
- If a test reveals a bug, fix code in `src/` and keep the test.
MSG
          gh pr comment ${{ github.event.number }} --body "$(cat _msg.md)"
          exit 1
